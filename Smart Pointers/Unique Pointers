0. unique_ptr is a class template.
1. unique_ptr is one of the smart pointer provided by c++11 to prevent memory leaks.
2. unique_ptr wraps a raw pointer in it, and de-allocates the raw pointer,
   when unique_ptr object goes out of scope.
3. similar to actual pointers we can use arrow and * on the object of unique_ptr,  because it is overloaded in unique_ptr class.
4. When exception comes then also it will de-allocate the memory hence no memory leak.
5. Not only object we can create array of objects of unique_ptr.

***********IMPLEMENT OWN UNIQUE POINTER*******
#include <iostream>
using namespace std;

template<typename T>
class uniqueptr
{
   public:
       T* m_ptr;

   public:
       uniqueptr(T* ptr=nullptr):m_ptr(ptr){

       }  
       ~uniqueptr()
       {
           delete m_ptr;
           m_ptr=nullptr;
       }

       //delete copy
       uniqueptr<T>(const uniqueptr<T>& ob) = delete;
       uniqueptr<T>& operator=(const uniqueptr<T>& ob) = delete;

       T& operator*()
       {
           return *m_ptr;
       }

       T* operator->()
       {
           return m_ptr;
       }
       friend ostream& operator<<(ostream& ob,const uniqueptr<T>& ob);

};

std::ostream& operator<< (std::ostream& stream, const Bar& bar)
ostream& operator<<(ostream& ob,uniqueptr<T>& ob)
{
    cout<<"overloading the ostream"<<endl;
    ob<<*m_ptr;
    return ob;
}

class demo
{
    public:
       void display()
       {
           cout<<" calling the display of demo class"<<endl;
       }
       

};




int main() 
{
    uniqueptr<demo> sp(new demo);

    cout<<*sp<<endl;
}


*******msdn link for good points******
https://docs.microsoft.com/en-us/cpp/cpp/how-to-create-and-use-unique-ptr-instances?view=msvc-170

A unique_ptr does not share its pointer. It cannot be copied to another unique_ptr, passed by value to a function, or used in any C++ Standard 
Library algorithm that requires copies to be made.
A unique_ptr can only be moved. This means that the ownership of the memory resource is transferred to another unique_ptr and the original 
unique_ptr no longer owns it.
unique_ptr is defined in the <memory> header in the C++ Standard Library. 
*****The addition of unique_ptr instances to C++ Standard Library containers is efficient because the move constructor of the unique_ptr eliminates 
the need for a copy operation.
unique_ptr copy constructor is deleted

As each unique_ptr object is sole owner of a raw pointer, therefore in its destructor it directly deletes the associated pointer.
There is no need of any reference counting, therefore its very light


***** example case issue*****

int main()
{
   int* p = new int;
   ..
   ...
   exception happens //fun return from here and deallocate local varibles.but heap memory not cleared. Wont delete p.//this is an issue
   
   delete p;
   return 0;
}

********  use of the unique ptr****************
#include<iostream>
using namespace std;
#include<memory>

class foo
{
private:
    int x;
    
public:
    foo(int a):x(a){
        
    }
    int getvalue(){return x;}
    ~foo()
    {
        cout<<"destroyed"<<endl;
    }
};

int main()
{
    foo *p = new foo(10);
    cout<<p->getvalue()<<endl;  //destructor not called. we forgot delete p
    
    std::unique_ptr<foo> spfoo(new foo(10));   //its an object on stack and when it goes out of scope its destructor is called 
    cout<<spfoo->getvalue()<<endl; //destructor called 
}

its a single ownership object.

/********* different ways to create the unique pointer*******
 std::unique_ptr<foo> spfoo(new foo(10));
 std::unique_ptr<foo> make_unique<foo>(10); ///best practice as its exception safe
 
 
 NOTE : 
 unique_ptr stores one pointer only. We can assign a different object by removing the current object from the pointer.
 
 ***** Creating a empty unique_ptr object
 std::unique_ptr<int> ptr1;
 
 // Create a unique_ptr object through raw pointer
std::unique_ptr<Task> taskPtr(new Task(23));

//NOTEEEEEEE
We can not create a unique_ptr<> object through assignment, otherwise it will cause compile error
// std::unique_ptr<Task> taskPtr2 = new Task(); // Compile Error

******* move***
We cannot copy a unique_ptr object, but we can move them. It means a unique_ptr object can transfer the owner ship of associated raw pointer to another 
unique_ptr object.

int main()
{
    std::unique_ptr<foo> sp1(new foo(10));
    cout<<"sp1 address "<<sp1.get()<<endl;
    cout<<"sp1 has "<<sp1->get()<<endl;
    
    // p1 = p2;  //cannot copy unique ptr
    
    //transfer owner from p1 to p3.now p3 will have what p1 had
    std::unique_ptr<foo> sp2= std::move(sp1);
    //sp1 will be NULL
    cout<<"sp2 address "<<sp2.get()<<endl;
    cout<<"Sp2 has "<<sp2->get()<<endl;
    if(!sp1)
        cout<<"sp1 empty"<<endl;
    
}
******* get*******
get will the managed object

    std::unique_ptr<foo> sp1(new foo(10));
    cout<<"sp1 is "<<sp1<<endl;
    //get the managed object
    foo* p1 = sp1.get();
    cout<<"p1 is "<<p1<<endl;
    
/******* release********
    std::unique_ptr<foo> sp1(new foo(10));
    
   /*Calling release() on unique_ptr object will release the ownership
     of associated raw pointer from the object.
      It returns the raw pointer*/
    
    foo* P = sp1.release();
    
    if(!sp1)
        cout<<"NULL"<<endl;
        
  /******* reset***      
  
  Calling reset() function on a unique_ptr<> object will reset it i.e. it will delete the associated raw pointer 
  and make unique_ptr<> object empty i.e.
  
      std::unique_ptr<foo> sp1(new foo(10));

    sp1.reset();
    
    if(!sp1)  cout<<"NULL"<<endl;
    
    
  
  


 
  





