It is basically a wrapper which wraps raw pointer and handles the life time of the object for you, means if there is no reference to the 
pointer it will delete it otherwise it will hold. There are basically three types of smart pointers. 

TYPES:
1. unique_ptr
2. shared_ptr
3. weak_ptr
And the basic job of smart pointer is, it actually makes sure that we don't have memory leaks.

/********** memory leak example *********
#include <iostream>
using namespace std;
 
class Rectangle {
private:
    int length;
    int breadth;
};
 
void fun()
{
    // By taking a pointer p and
    // dynamically creating object
    // of class rectangle
    Rectangle* p = new Rectangle();
}
 
int main()
{
    // Infinite Loop
    while (1) {
        fun();
    }
}


A Smart Pointer is a wrapper class over a pointer with an operator like * and -> overloaded.

The idea is to take a class with a pointer, destructor and overloaded operators like * and ->. Since the destructor is automatically 
called when an object goes out of scope, the dynamically allocated memory would automatically be deleted.

#include <iostream>
using namespace std;
 
class SmartPtr {
    int* ptr; // Actual pointer
public:
    // Constructor: Refer https:// www.geeksforgeeks.org/g-fact-93/
    // for use of explicit keyword
    explicit SmartPtr(int* p = NULL) { ptr = p; }
 
    // Destructor
    ~SmartPtr() { delete (ptr); }
 
    // Overloading dereferencing operator
    int& operator*() { return *ptr; }
};
 
int main()
{
    SmartPtr ptr(new int());
    *ptr = 20;
    cout << *ptr;
 
    // We don't need to call delete ptr: when the object
    // ptr goes out of scope, the destructor for it is automatically
    // called and destructor does delete ptr.
 
    return 0;
}

//write above as template class as it can work with all data types.











