catching all exceptions*****

#include <iostream>
#include<string>
using namespace std;



int main()
{
    int x=-1;

    cout<<"before the try"<<endl;

    try
    {
        cout<<"inside try"<<endl;
        if(x<0)
            throw 'A';
        cout<<"never executed"<<endl;    
    }
    catch(...)
    {
       cout<<"cathcing exce"<<endl;
    }

    return 0;
}
*****Implicit type conversion doesn’t happen for primitive types. For example, in the following program, ‘a’ is not implicitly converted to int. ***
#include <iostream>
using namespace std;

int main()
{
	try {
	throw 'a';
	}
	catch (int x) {
		cout << "Caught " << x;
	}
	catch (...) {
		cout << "Default Exception\n";
	}
	return 0;
}


*********
A derived class exception should be caught before a base class exception. See this for more details.

// C++ Program to demonstrate a catching of
// Derived exception and printing it successfully
#include <iostream>
using namespace std;

class Base {};
class Derived : public Base {};
int main()
{
	Derived d;
	// Some other functionalities
	try {
		// Monitored code
		throw d;
	}
	catch (Derived d) {
		cout << "Caught Derived Exception";
	}******
  
  
  
  // C++ Program to show what really happens
// when an exception is thrown from
// a constructor
#include <iostream>
using namespace std;

class Test1 {
public:
	// Constructor of the class
	Test1()
	{
		cout << "Constructing an Object of class Test1"
			<< endl;
	}
	// Destructor of the class
	~Test1()
	{
		cout << "Destructing an Object the class Test1"
			<< endl;
	}
};

class Test2 {
public:
	// Following constructor throws
	// an integer exception
	Test2() // Constructor of the class
	{
		cout << "Constructing an Object of class Test2"
			<< endl;
		throw 20;
	}
	// Destructor of the class
	~Test2()
	{
		cout << "Destructing the Object of class Test2"
			<< endl;
	}
};

int main()
{
	try {
		// Constructed and destructed
		Test1 t1;

		// Partially constructed
		Test2 t2;

		// t3 is not constructed as
		// this statement never gets executed
		Test1 t3; // t3 is not called as t2 is
				// throwing/returning 'int' argument which
				// is not accepted
				// is the class test1'
	}
	catch (int i) {
		cout << "Caught " << i << endl;
	}
}

Destructors are only called for the completely constructed objects. When the constructor of an object throws an exception, the destructor for that object is not called. 
