STATIC DATA MEMBER:
Static data members are class members that are declared using static keywords. A static member has certain special characteristics which are as follows:

Only one copy of that member is created for the entire class and is shared by all the objects of that class, no matter how many objects are created.
It is initialized before any object of this class is created, even before the main starts outside the class itself.
It is visible can be controlled with the class access specifiers.
Its lifetime is the entire program.

#include <iostream>

class MyClass {
public:
    static int count;  // Declaration of static data member

    MyClass() {
        count++;  // Increment count whenever an object is created
    }
};

// Definition of static data member outside the class
int MyClass::count = 0;

int main() {
    MyClass obj1;
    MyClass obj2;
    MyClass obj3;

    std::cout << "Count: " << MyClass::count << std::endl;  // Access via class name

    return 0;
}



why static data member ( count ) must be defined outside the class?*************
Outside the class: The definition allocates memory and initializes the static data member.

The declaration of a static data member inside the class tells the compiler that such a member exists, but does not allocate memory for it. 
This declaration serves to indicate that there will be one shared copy across all objects.

Since a static data member is shared by all instances of the class, it requires only one memory location. 
This memory is allocated when you define the static data member outside the class.
Without this definition, the compiler does not allocate memory for the static member.

A static member is associated with the class itself, not with any particular instance. 
By defining it outside the class, you ensure that it is given external linkage (visible to the linker), 
which allows it to be accessed across translation units (if needed).


Inline Initialization (Since C++17):
Starting with C++17, you can initialize static data members directly inside the class if they are of an integral type and have a constant expression value. For example:

class MyClass {
public:
    static inline int count = 0;  // C++17 allows inline definition
};


whats the default value of static data member*************
1. Primitive types : Default value: 0

class MyClass {
public:
    static int count;  // Declaration
};

int MyClass::count;  // Implicitly initialized to 0



2. Non-primitive types (e.g., std::string, user-defined classes):    *******imp

#include <string>

class MyClass {
public:
    static std::string name;  // Declaration
};

std::string MyClass::name;  // Implicitly initialized to an empty string using default constructor



*******Can static data members be private?
Static data members can be private, protected, or public.
Private static data members cannot be accessed directly from outside the class, but can be accessed indirectly through public or protected member functions of the class.
Access control for static members operates the same way as for non-static members.

Can we inherit static data members ?
Static data members are class-specific and cannot be inherited. 
But we can access the static data member in the derived class directly using variable name

The static data member will be initialized using its default constructor.
If no default constructor exists, you'll get a compiler error unless you explicitly initialize it.


Can we have static member functions in a class?
Yes, static member functions can be defined in a class. They can access static data members but cannot access non-static data members or this pointer.



why static member function cannot access non-static data members or this pointer?
Static Member Functions:

Cannot access non-static data members directly because they are not associated with any instance.
Cannot use the this pointer as they do not operate on any specific object instance.
Non-Static Member Functions:

Have access to both non-static and static data members.
Can use the this pointer to refer to the specific instance they are operating on.


**********STATIC MEMBER FUNCTIONS*********
Static members of a class are not associated with the objects of the class. Just like a static variable once declared is allocated with memory that canâ€™t be changed every object points to the same memory.

#include <iostream>

class MyClass {
private:
    static int staticCount;  // Static data member

public:
    // Static member function
    static void displayCount() {
        std::cout << "Static count: " << staticCount << std::endl;
    }

    // Static member function to modify static data
    static void incrementCount() {
        staticCount++;
    }
};

// Definition of static data member
int MyClass::staticCount = 0;

int main() {
    // Calling static member functions using the class name
    MyClass::incrementCount();
    MyClass::displayCount();  // Output: Static count: 1

    MyClass obj;
    obj.incrementCount();    // Also affects the static data member
    obj.displayCount();     // Output: Static count: 2

    return 0;
}


Summary:
Static member functions belong to the class itself, not to any instance of the class.
They can access static data members and other static member functions but cannot access non-static data members or member functions.
They are called using the class name, but can also be accessed through an object instance.



what is the need of static member functions?
Summary
Static member functions are useful for:

Providing utility functions that do not need access to instance-specific data.
Accessing and modifying class-level (static) data members.
Implementing factory methods for creating instances.
Implementing design patterns like Singleton.
Enhancing performance by avoiding the need to create objects when not necessary.


