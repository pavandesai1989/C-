1. Implement your own String class  *****************

#include <iostream>
#include <cstring>  // For strlen, strcpy, strcat

class MyString {
private:
    char* data;    // Pointer to dynamically allocate memory for the string
    size_t size;   // Length of the string

public:
    // Default constructor
    MyString() : data(nullptr), size(0) {}

    // Constructor that takes a C-style string
    MyString(const char* str) {
        size = strlen(str);
        data = new char[size + 1];  // Allocate memory
        strcpy(data, str);          // Copy the string
    }

    // Copy constructor
    MyString(const MyString& other) {
        size = other.size;
        data = new char[size + 1];  // Allocate memory for the new string
        strcpy(data, other.data);   // Copy the data from the other string
    }

    // Move constructor
    MyString(MyString&& other) noexcept : data(other.data), size(other.size) {
        other.data = nullptr;  // Reset the other object
        other.size = 0;
    }

    // Copy assignment operator
    MyString& operator=(const MyString& other) {
        if (this != &other) {  // Self-assignment check
            delete[] data;     // Deallocate current memory

            size = other.size;
            data = new char[size + 1];  // Allocate new memory
            strcpy(data, other.data);   // Copy the data
        }
        return *this;
    }

    // Move assignment operator
    MyString& operator=(MyString&& other) noexcept {
        if (this != &other) {
            delete[] data;   // Deallocate current memory

            data = other.data;  // Steal the data
            size = other.size;

            other.data = nullptr;  // Reset the other object
            other.size = 0;
        }
        return *this;
    }

    // Concatenation operator
    MyString operator+(const MyString& other) const {
        MyString result;
        result.size = size + other.size;
        result.data = new char[result.size + 1];  // Allocate memory for concatenated string

        strcpy(result.data, data);   // Copy first string
        strcat(result.data, other.data);  // Concatenate second string

        return result;
    }

    // Destructor
    ~MyString() {
        delete[] data;  // Deallocate memory
    }

    // Function to get the string
    const char* getString() const {
        return data;
    }

    // Function to get the size of the string
    size_t getSize() const {
        return size;
    }

    // Overloading the << operator for output
    friend std::ostream& operator<<(std::ostream& os, const MyString& str) {
        os << str.getString();
        return os;
    }
};

int main() {
    MyString s1("Hello");
    MyString s2(" World");
    MyString s3 = s1 + s2;  // Concatenation

    std::cout << "Concatenated String: " << s3 << std::endl;  // Output: Hello World

    MyString s4 = s3;  // Copy constructor
    std::cout << "Copied String: " << s4 << std::endl;        // Output: Hello World

    MyString s5;
    s5 = std::move(s4);  // Move assignment
    std::cout << "Moved String: " << s5 << std::endl;         // Output: Hello World

    return 0;
}
